plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id "net.kyori.blossom" version "2.1.0" apply false
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7" apply false
}

subprojects {
    apply plugin: "architectury-plugin"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "dev.architectury.loom"
    apply plugin: "java"
    apply plugin: "org.jetbrains.gradle.plugin.idea-ext"
    apply plugin: "signing"

    group = "io.github.lxgaming"
    version = "${minecraftVersion}-${version}"

    architectury {
        addCommonMarker = false
        injectInjectables = false
        minecraft = minecraftVersion
    }

    loom {
        silentMojangMappingsLicense()
        mixin {
            defaultRefmapName = "mixins.northerncompass.refmap.json"
        }
    }

    configurations {
        common
        compileJar
        signJar

        compileClasspath.extendsFrom(common)
        runtimeClasspath.extendsFrom(common)
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        minecraft("com.mojang:minecraft:${minecraftVersion}")
        mappings(loom.officialMojangMappings())
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    task signJar {
        doFirst {
            if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
                project.logger.warn("========== [WARNING] ==========")
                project.logger.warn("")
                project.logger.warn("   This build is not signed!   ")
                project.logger.warn("")
                project.logger.warn("========== [WARNING] ==========")
                throw new StopExecutionException()
            }
        }

        doLast {
            configurations.signJar.allArtifacts.files.each {
                ant.signjar(
                        jar: it,
                        alias: project.property("signing.alias"),
                        storepass: project.property("signing.keyStorePassword"),
                        keystore: project.property("signing.keyStorePath"),
                        keypass: project.property("signing.keyStorePassword"),
                        preservelastmodified: project.property("signing.preserveLastModified"),
                        tsaurl: project.property("signing.timestampAuthority"),
                        digestalg: project.property("signing.digestAlgorithm")
                )
                project.logger.lifecycle("JAR Signed: ${it.name}")

                signing.sign(it)
                project.logger.lifecycle("PGP Signed: ${it.name}")
            }
        }
    }
}