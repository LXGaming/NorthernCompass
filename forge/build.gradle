buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gradle"
            url = "https://plugins.gradle.org/m2"
        }
        maven {
            name = "minecraftforge"
            url = "https://maven.minecraftforge.net/"
        }
    }

    dependencies {
        classpath("net.kyori:blossom:1.3.0")
        classpath("net.minecraftforge.gradle:ForgeGradle:5.1.+")
    }
}

apply plugin: "java"
apply plugin: "net.kyori.blossom"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "signing"

group = "io.github.lxgaming"
archivesBaseName = "NorthernCompass-Forge"

blossom {
    replaceToken("@version@", version)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

minecraft {
    mappings(channel: "official", version: "1.17.1")
    runs {
        client = {
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            properties("forge.logging.console.level": "debug")
            source(sourceSets.main)
            workingDirectory(project.file("run"))
        }

        server = {
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            properties("forge.logging.console.level": "debug")
            source(sourceSets.main)
            workingDirectory(project.file("run"))
        }
    }
}

configurations {
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft("net.minecraftforge:forge:1.17.1-37.0.9")
}

build {
    build.dependsOn("signJar")
}

jar {
    manifest {
        attributes(
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Implementation-Title": "NorthernCompass",
                "Implementation-Vendor": "LX_Gaming",
                "Implementation-Version": "${project.version}",
                "Specification-Title": "northerncompass",
                "Specification-Vendor": "LX_Gaming",
                "Specification-Version": "1"
        )
    }
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from("../LICENSE")
    rename("LICENSE", "LICENSE-NorthernCompass")

    from (sourceSets.main.resources.srcDirs) {
        include("META-INF/mods.toml")
        expand("version": version)
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}