buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "minecraftforge"
            url = "https://maven.minecraftforge.net/"
        }
    }

    dependencies {
        classpath("net.minecraftforge.gradle:ForgeGradle:5.1.+")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "net.minecraftforge.gradle"

archivesBaseName = "NorthernCompass-Forge"

minecraft {
    mappings(channel: "official", version: "1.18.2")
    runs {
        client = {
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }

        server = {
            args("nogui")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }
    }
}

configurations {
    compileJar {
        implementation.extendsFrom(compileJar)
    }
}

repositories {
}

dependencies {
    compileJar(project(path: ":northerncompass-common"))
    minecraft("net.minecraftforge:forge:1.18.2-40.0.32")
}

build {
    dependsOn("signJar")
}

compileJava {
    dependsOn(":northerncompass-common:build")
}

jar {
    enabled = false
    dependsOn("shadowJar")
    manifest {
        attributes(
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Implementation-Title": "NorthernCompass",
                "Implementation-Vendor": "LX_Gaming",
                "Implementation-Version": "${project.version}",
                "Specification-Title": "northerncompass",
                "Specification-Vendor": "LX_Gaming",
                "Specification-Version": "1"
        )
    }
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from (sourceSets.main.resources.srcDirs) {
        include("META-INF/mods.toml")
        expand("version": version)
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.compileJar]
}